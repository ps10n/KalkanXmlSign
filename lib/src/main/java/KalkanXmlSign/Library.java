/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package KalkanXmlSign;

import kz.gov.pki.kalkan.asn1.pkcs.PKCSObjectIdentifiers;
import kz.gov.pki.kalkan.jce.provider.KalkanProvider;
import kz.gov.pki.kalkan.xmldsig.KncaXS;
import org.apache.ws.security.message.WSSecHeader;
import org.apache.ws.security.message.token.SecurityTokenReference;
import org.apache.xml.security.c14n.Canonicalizer;
import org.apache.xml.security.encryption.XMLCipherParameters;
import org.apache.xml.security.signature.XMLSignature;
import org.apache.xml.security.transforms.Transforms;
import org.apache.xml.security.utils.Constants;
import org.apache.xml.security.utils.XMLUtils;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import javax.xml.namespace.QName;
import javax.xml.soap.*;
import javax.xml.transform.stream.StreamSource;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.security.PrivateKey;
import java.security.Security;
import java.security.cert.X509Certificate;
import java.util.UUID;

public class Library {
    static final String WSU_NS = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd";
    static final String WSU_PREFIX = "wsu";

    /**
     * XML-string sign method
     *
     * @param SIMPLE_XML_SOAP - XML-string for signature (one-liner)
     * @param CERT_PATH       - path to cert
     * @param KEY_PASS        - password to cert
     * @return Signed XML-string
     */
    public static String sign(String SIMPLE_XML_SOAP, String CERT_PATH, String KEY_PASS) {
        KalkanProvider kalkanProvider = new KalkanProvider();
        Security.addProvider(kalkanProvider);
        KncaXS.loadXMLSecurity();

        final String signMethod;
        final String digestMethod;
        InputStream is = new ByteArrayInputStream(SIMPLE_XML_SOAP.getBytes());
        try {
            SOAPMessage msg = MessageFactory.newInstance().createMessage(null, is);

            SOAPEnvelope env = msg.getSOAPPart().getEnvelope();
            SOAPBody body = env.getBody();

            String bodyId = "id-" + UUID.randomUUID();
            body.addAttribute(new QName(WSU_NS, "Id", WSU_PREFIX), bodyId);

            SOAPHeader header = env.getHeader();
            if (header == null) {
                header = env.addHeader();
            }

            PrivateKey privateKey = FileSystemFunctions.loadKeyFromFile(CERT_PATH, "PKCS12", KEY_PASS);
            X509Certificate x509Certificate = FileSystemFunctions.loadCertFromFile(CERT_PATH, "PKCS12", KEY_PASS);
            String val_str = FileSystemFunctions.validCertFromFile(CERT_PATH, "PKCS12", KEY_PASS);

            if (val_str != "Ok") {
                throw new Exception(val_str);
            }

            String sigAlgOid = x509Certificate.getSigAlgOID();
            if (sigAlgOid.equals(PKCSObjectIdentifiers.sha1WithRSAEncryption.getId())) {
                signMethod = Constants.MoreAlgorithmsSpecNS + "rsa-sha1";
                digestMethod = Constants.MoreAlgorithmsSpecNS + "sha1";
            } else if (sigAlgOid.equals(PKCSObjectIdentifiers.sha256WithRSAEncryption.getId())) {
                signMethod = Constants.MoreAlgorithmsSpecNS + "rsa-sha256";
                digestMethod = XMLCipherParameters.SHA256;
            } else {
                signMethod = Constants.MoreAlgorithmsSpecNS + "gost34310-gost34311";
                digestMethod = Constants.MoreAlgorithmsSpecNS + "gost34311";
            }

            Document doc = env.getOwnerDocument();
            Transforms transforms = new Transforms(env.getOwnerDocument());
            transforms.addTransform(Transforms.TRANSFORM_C14N_EXCL_OMIT_COMMENTS);
            Element c14nMethod = XMLUtils.createElementInSignatureSpace(doc, "CanonicalizationMethod");
            c14nMethod.setAttributeNS(null, "Algorithm", Canonicalizer.ALGO_ID_C14N_EXCL_OMIT_COMMENTS);

            Element signatureMethod = XMLUtils.createElementInSignatureSpace(doc, "SignatureMethod");
            signatureMethod.setAttributeNS(null, "Algorithm", signMethod);

            XMLSignature sig = new XMLSignature(env.getOwnerDocument(), "", signatureMethod, c14nMethod);

            sig.addDocument("#" + bodyId, transforms, digestMethod);
            sig.getSignedInfo().getSignatureMethodElement().setNodeValue(Transforms.TRANSFORM_C14N_EXCL_OMIT_COMMENTS);

            WSSecHeader secHeader = new WSSecHeader();
            secHeader.setMustUnderstand(true);
            secHeader.insertSecurityHeader(env.getOwnerDocument());
            Element tst = secHeader.getSecurityHeader();
            tst.appendChild(sig.getElement());
            //secHeader.getSecurityHeader().appendChild(sig.getElement());
            header.appendChild(/*secHeader.getSecurityHeader()*/tst);

            SecurityTokenReference reference = new SecurityTokenReference(doc);
            reference.setKeyIdentifier(x509Certificate);

            sig.getKeyInfo().addUnknownElement(reference.getElement());
            sig.sign(privateKey);

            String signedSoap = org.apache.ws.security.util.XMLUtils.PrettyDocumentToString(doc);

            SOAPMessage soapMessage = createSOAPFromString(signedSoap);
            //return soapMessage.toString();
            return signedSoap;

        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

    public static SOAPMessage createSOAPFromString(String xmlString) {
        SOAPMessage message = null;
        try {
            message = MessageFactory.newInstance().createMessage();
            SOAPPart soapPart = message.getSOAPPart();
            ByteArrayInputStream stream = null;
            stream = new ByteArrayInputStream(xmlString.getBytes(StandardCharsets.UTF_8));
            StreamSource source = new StreamSource(stream);
            soapPart.setContent(source);
            try {
                stream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        } catch (SOAPException e) {
            e.printStackTrace();
        }
        return message;
    }
}
